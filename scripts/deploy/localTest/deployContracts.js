const { ethers } = require("hardhat");

async function main() {
    const [owner, depositor] = await ethers.getSigners();

    console.log("Tri·ªÉn khai ThornERC20...");
    const ThornERC20 = await ethers.getContractFactory("ThornERC20");
    const usdt = await ThornERC20.deploy("CDat", "CDT", 6, 1000000);
    await usdt.waitForDeployment();
    console.log("‚úÖ USDT deployed t·∫°i:", usdt.target);

    await usdt.connect(owner).setVault(owner.address);
    await usdt.connect(owner).mint(depositor.address, ethers.parseUnits("1000", 6));
    console.log("‚úÖ Mint th√†nh c√¥ng 1000 CDT cho depositor");

    console.log("Tri·ªÉn khai PrivateSaleRoundOne...");
    const PrivateSaleRoundOne = await ethers.getContractFactory("PrivateSaleRoundOne");
    const privateSaleRoundOne = await PrivateSaleRoundOne.deploy(usdt.target);
    await privateSaleRoundOne.waitForDeployment();
    console.log("‚úÖ PrivateSaleRoundOne deployed t·∫°i:", privateSaleRoundOne.target);

    console.log("C·∫•u h√¨nh PrivateSaleRoundOne...");
    const buyingTimeStart = Math.floor(Date.now() / 1000);
    const vestingTimeStart = buyingTimeStart + 86400 * 30;
    const vestingTerm = 86400 * 180;
    const maxDebt = ethers.parseUnits("10000000", 18);
    const maxPayout = ethers.parseUnits("50000", 6);
    const discountRatio = 30000;
    const tge = 10000;
    const cliffingTimeStart = vestingTimeStart;
    const cliffingTerm = 86400 * 60;

    await privateSaleRoundOne.initializePrivateSaleRound(
        buyingTimeStart,
        vestingTimeStart - buyingTimeStart,
        vestingTimeStart,
        vestingTerm,
        cliffingTimeStart,
        cliffingTerm,
        discountRatio,
        maxDebt,
        maxPayout,
        tge
    );
    console.log("‚úÖ Private Sale Round One setup th√†nh c√¥ng!");

    console.log("Tri·ªÉn khai MockToken...");
    const MockToken = await ethers.getContractFactory("MockToken");
    const thornToken = await MockToken.deploy();
    await thornToken.waitForDeployment();
    console.log("‚úÖ MockToken (Thorn) deployed t·∫°i:", thornToken.target);

    await privateSaleRoundOne.setThornAddress(thornToken.target);
    console.log("‚úÖ Set ƒë·ªãa ch·ªâ Thorn token th√†nh c√¥ng.");

    await thornToken.mint(privateSaleRoundOne.target, ethers.parseUnits("1000000", 18));
    console.log("‚úÖ Mint 1 tri·ªáu Thorn cho PrivateSaleRoundOne.");

    console.log("\nüìå **T√≥m t·∫Øt ƒë·ªãa ch·ªâ h·ª£p ƒë·ªìng:**");
    console.log("   ThornERC20 (USDT):", usdt.target);
    console.log("   PrivateSaleRoundOne:", privateSaleRoundOne.target);
    console.log("   MockToken (Thorn):", thornToken.target);
}

main().catch((error) => {
    console.error("‚ùå Tri·ªÉn khai th·∫•t b·∫°i:", error);
    process.exit(1);
});
